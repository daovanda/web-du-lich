"use client";

import { useEffect, useRef, useState } from "react";
import { supabase } from "@/lib/supabase";
import BookingForm from "@/components/BookingForm";

type Props = {
  serviceId: string;
  price: string | null;
  serviceTitle: string;
};

export default function BookingFormWrapper({ serviceId, price, serviceTitle }: Props) {
  const [user, setUser] = useState<any>(null);
  const [privateRoomId, setPrivateRoomId] = useState<string | null>(null);

  // Ch·ªëng spam: rate limit 5s gi·ªØa c√°c l·∫ßn submit th√†nh c√¥ng
  const lastSubmitAtRef = useRef<number>(0);
  const isProcessingRef = useRef<boolean>(false);
  const RATE_LIMIT_MS = 5000;

  // L·∫•y user hi·ªán t·∫°i
  useEffect(() => {
    (async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) setUser(user);
    })();
  }, []);

  // L·∫•y ph√≤ng chat private
  useEffect(() => {
    if (!user) return;

    const fetchPrivateRoom = async () => {
      const { data } = await supabase
        .from("chat_rooms")
        .select("id")
        .eq("type", "private")
        .eq("user_id", user.id)
        .maybeSingle();

      if (data) setPrivateRoomId(data.id);
    };

    fetchPrivateRoom();
  }, [user]);

  // Map label hi·ªÉn th·ªã th√¢n thi·ªán cho payment_method/payment_status
  const methodLabel: Record<string, string> = {
    cash: "Ti·ªÅn m·∫∑t",
    credit_card: "Th·∫ª t√≠n d·ª•ng",
    momo: "MoMo",
    zalopay: "ZaloPay",
  };

  const statusLabel: Record<string, string> = {
    unpaid: "Ch∆∞a thanh to√°n",
    paid: "ƒê√£ thanh to√°n",
    refunded: "ƒê√£ ho√†n ti·ªÅn",
  };

  const formatCurrency = (n?: number | null) => {
    if (n == null || Number.isNaN(n)) return "‚Äî";
    return `${new Intl.NumberFormat("vi-VN").format(n)} ƒë`;
  };

  // Callback ƒë·ªÉ g·ª≠i chat sau khi booking th√†nh c√¥ng
  const handleSubmitSuccess = async (formData: any) => {
    // Ch·∫∑n spam: n·∫øu ƒëang x·ª≠ l√Ω ho·∫∑c g·ª≠i trong v√≤ng RATE_LIMIT_MS th√¨ b·ªè qua
    const now = Date.now();
    if (isProcessingRef.current) return;
    if (now - lastSubmitAtRef.current < RATE_LIMIT_MS) return;

    isProcessingRef.current = true;

    try {
      // ƒê·∫£m b·∫£o c√≥ ph√≤ng private; n·∫øu ch∆∞a c√≥ th√¨ c·ªë g·∫Øng t·∫°o nhanh
      let roomId = privateRoomId;
      if (!roomId && user) {
        const { data: existing } = await supabase
          .from("chat_rooms")
          .select("id")
          .eq("type", "private")
          .eq("user_id", user.id)
          .maybeSingle();

        if (existing?.id) {
          roomId = existing.id;
          setPrivateRoomId(existing.id);
        } else {
          const { data: created } = await supabase
            .from("chat_rooms")
            .insert({ type: "private", user_id: user.id })
            .select("id")
            .single();
          roomId = created?.id ?? null;
          if (created?.id) setPrivateRoomId(created.id);
        }
      }

      if (!user || !roomId) {
        return;
      }

      // L·∫•y d·ªØ li·ªáu t·ª´ BookingForm (ƒë√£ ƒë∆∞·ª£c b·ªï sung)
      const bookingId: string | undefined = formData?.bookingId;
      const fullName: string = formData?.fullName ?? formData?.name ?? "‚Äî";
      const phone: string = formData?.phone ?? "‚Äî";
      const dateFrom: string | null = formData?.dateFrom ?? null;
      const dateTo: string | null = formData?.dateTo ?? null;
      const note: string = formData?.note ?? "Kh√¥ng c√≥";

      // C√°c tr∆∞·ªùng m·ªõi t·ª´ BookingForm
      const payment_status_raw: string = (formData?.payment_status ?? "").toString().trim().toLowerCase();
      const payment_method_raw: string = (formData?.payment_method ?? "").toString().trim().toLowerCase();
      const total_price_num: number | null = formData?.total_price ?? null;
      const unitPrice_num: number | null = formData?.unitPrice ?? null;
      const nights: number | null = formData?.nights ?? null;

      // Chu·∫©n h√≥a fallback ƒë·ªÉ kh·ªõp r√†ng bu·ªôc DB
      const payment_status = ["unpaid", "paid", "refunded"].includes(payment_status_raw)
        ? payment_status_raw
        : "unpaid";

      const payment_method = ["cash", "credit_card", "momo", "zalopay"].includes(payment_method_raw)
        ? payment_method_raw
        : "cash";

      const messageLines: string[] = [
        "üöó ƒê∆°n ƒë·∫∑t xe m·ªõi",
        `- D·ªãch v·ª•: ${serviceTitle}`,
        `- Gi√°/ƒë√™m: ${unitPrice_num != null ? formatCurrency(unitPrice_num) : (price ?? "Li√™n h·ªá")}`,
        `- S·ªë ƒë√™m: ${nights ?? "‚Äî"}`,
        `- T·∫°m t√≠nh: ${formatCurrency(total_price_num)}`,
        `- H·ªç t√™n: ${fullName}`,
        `- S·ªë ƒëi·ªán tho·∫°i: ${phone}`,
        `- Ng√†y thu√™: ${dateFrom && dateTo ? `${dateFrom} - ${dateTo}` : "Ch∆∞a ch·ªçn"}`,
        `- Ghi ch√∫: ${note}`,
        `- Ph∆∞∆°ng th·ª©c thanh to√°n: ${methodLabel[payment_method] ?? payment_method}`,
        `- Tr·∫°ng th√°i thanh to√°n: ${statusLabel[payment_status] ?? payment_status}`,
        `- Tr·∫°ng th√°i: ƒêang ch·ªù x√°c nh·∫≠n`,
      ];

      if (bookingId) {
        messageLines.splice(1, 0, `- M√£ ƒë·∫∑t: ${bookingId}`);
      }

      const messageText = messageLines.join("\n");

      await supabase.from("chat_messages").insert({
        room_id: roomId,
        sender_id: user.id,
        content: messageText,
        from_admin: false,
      });

      lastSubmitAtRef.current = now;
    } finally {
      isProcessingRef.current = false;
    }
  };

  if (!user) return null;

  return (
    <BookingForm
      serviceId={serviceId}
      price={price}
      onSubmitSuccess={handleSubmitSuccess}
    />
  );
}